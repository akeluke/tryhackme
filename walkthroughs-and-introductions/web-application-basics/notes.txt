The basics of a web application:


--------------------------------
Components of a web application
--------------------------------
Front end (HTML, CSS, JS) is the part a user interacts with
Back end (Databases, storage, networking, or a Web Application Firewall or WAF) this is part the user doesn't see but is vital to the function of the web application.

--------------------------------
HTTP Messages (Requests and Responses)
--------------------------------

HTTP Messages: Data exchanged between a client and server. They allow for data to be transmitted and recieved.
There are two types of messages:
HTTP Requests: Data sent by a client
HTTP Responses: Data sent by a server

--------------------------------
HTTP Requests
--------------------------------
A HTTP request has a few requirements:

The method (GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS, TRACE, CONNECT)
The Path (This tells the server where to find the resource on the server requested by the client)
HTTP Version (This is the protocol to communicate with the server, the typical version is 1.1 and the most modern is 3)

A request also provides some extra information through the use of 'headers', some examples:
'Host: tryhackme.com' - Name of web server
'User-Agent: Mozilla/5.0' - Information about web browser used
'Referer: https://www.google.com/' - URL request came from
'Cookie: user_type=student;' - Information the web server privously asked the browser to store
'Content-Type: application/json' - Descripes type or fomat of the data in the request

In HTTP requests such as POST and PUT where data is being sent, this is added in the body of the request
These types of requests have multiple formats (Content-Type Header) such as:


Url Encoded (application/x-www-form-urlencoded) - Where is data is sent using the format 'key=value'. Example:

POST /profile HTTP/1.1
Host: tryhackme.com
User-Agent: Mozilla/5.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 33

name=Aleksandra&age=27&country=US


Form Data (multipart/form-data) - Allows for multiple blocks of data to be sent seperated by 'boundry string' see example:

POST /upload HTTP/1.1
Host: tryhackme.com
User-Agent: Mozilla/5.0
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

----WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="username"

aleksandra
----WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="profile_pic"; filename="aleksandra.jpg"
Content-Type: image/jpeg

[Binary Data Here representing the image]
----WebKitFormBoundary7MA4YWxkTrZu0gW--

JSON (application/json) - Data sent in JSON format using {}. Example:

POST /api/user HTTP/1.1
Host: tryhackme.com
User-Agent: Mozilla/5.0
Content-Type: application/json
Content-Length: 62

{
    "name": "Aleksandra",
    "age": 27,
    "country": "US"
}

XML (application/xml) - XML format structed inside labels/tags. Example:

POST /api/user HTTP/1.1
Host: tryhackme.com
User-Agent: Mozilla/5.0
Content-Type: application/xml
Content-Length: 124

<user>
    <name>Aleksandra</name>
    <age>27</age>
    <country>US</country>
</user>



--------------------------------
HTTP Responses
--------------------------------

The First line provides with a response code on how the request was recieved.

It then also provides some important information such as:
Content-Type, Content-Length and Date

It also provides a 'Server: ' header providing information on what type of server is handling the reponse.

Some other common response headers include:
'Set-Cookie: ***'
'Cache-Control: ' - Tells the client how it can cache the response before checking the server again
'Location: ' - This is used in status code 3** as it tells a client where to go if a resource has moved. this can be used in open redirect vulns

Response Body:
This is where the data for the response resides, such as HTML, JSON, Images etc etc. 

--------------------------------
HTTP Response Status Codes
--------------------------------

Common Status Codes

Here are some of the most frequently seen status codes:

100 (Continue)
The server got the first part of the request and is ready for the rest.

200 (OK)
The request was successful, and the server is sending back the requested resource.

301 (Moved Permanently)
The resource you’re requesting has been permanently moved to a new URL. Use the new URL from now on.

404 (Not Found)
The server couldn’t find the resource at the given URL. Double-check that you’ve got the right address.

500 (Internal Server Error)
Something went wrong on the server’s end, and it couldn’t process your request.



----------------------------------------------------------------
					Security Headers
----------------------------------------------------------------

HTTP security headers improve overall security by providing mitigation against XSS, clickjacking and others.
Types of headers:

    Content-Security-Policy (CSP)
    Strict-Transport-Security (HSTS)
    X-Content-Type-Options
    Referrer-Policy



Content-Security-Policy (CSP):

A CSP header prevents malicious code hosted somewhere else being injected into the site.

Example:
"Content-Security-Policy: default-src 'self'; script-src 'self' https://cdn.tryhackme.com; style-src 'self'"

default-src - which specifies the default policy of self, which means only the current website.

script-src - which specifics the policy for where scripts can be loaded from, which is self along with scripts hosted on https://cdn.tryhackme.com

style-src - which specifies the policy for where style CSS style sheets can be loaded from the current website (self)



Strict-Transport-Security (HSTS):
Ensures browsers only connect over HTTPS. Example:

Strict-Transport-Security: max-age=63072000; includeSubDomains; preload


X-Content-Type-Options
Used to instruct browsers not to guess the MIME time of a resource but only use the Content-Type header. Example:

X-Content-Type-Options: nosniff



Referrer-Policy


    Referrer-Policy: no-referrer
    Referrer-Policy: same-origin
    Referrer-Policy: strict-origin
    Referrer-Policy: strict-origin-when-cross-origin

no-referrer - This completely disables any information being sent about the referrer 

same-origin - This policy will only send referrer information when the destination is part of the same origin. This is helpful when you want referrer information passed when hyperlinks are within the same website but not outside to external websites.

strict-origin - This policy only sends the referrer as the origin when the protocol stays the same. So, a referrer is sent when an HTTPS connection goes to another HTTPS connection. 

strict-origin-when-cross-origin - This is similar to strict-origin except for same-origin requests, where it sends the full URL path in the origin header.
